import random 
from datetime import datetime
random.seed(datetime.now().timestamp())

styles = {
    "cinematic": "cinematic film still of {prompt}, highly detailed, high budget hollywood movie, cinemascope, moody, epic, gorgeous, film grain",
    "anime": "anime artwork of {prompt}, anime style, key visual, vibrant, studio anime, highly detailed",
    "photographic": "cinematic photo of {prompt}, 35mm photograph, film, professional, 4k, highly detailed",
    "comic": "comic of {prompt}, graphic illustration, comic art, graphic novel art, vibrant, highly detailed",
    "lineart": "line art drawing {prompt}, professional, sleek, modern, minimalist, graphic, line art, vector graphics",
    "pixelart": " pixel-art {prompt}, low-res, blocky, pixel art style, 8-bit graphics",
    # below is generated by gpt 4-o
    "Surrealist": "surreal painting of {prompt}, dreamlike, Salvador Dal√≠ inspired, abstract, imaginative, vivid colors, bizarre forms, highly detailed", 
    "Watercolor": "watercolor painting of {prompt}, soft brush strokes, pastel colors, artistic, handmade, fluid, delicate, washed tones, highly detailed", 
    "Cyberpunk": "cyberpunk style {prompt}, futuristic, neon lights, dystopian cityscape, sleek tech, dark atmosphere, sci-fi, highly detailed", 
    "Fantasy": "fantasy artwork of {prompt}, magical, mystical, enchanted, epic, highly detailed, vibrant, Tolkien-esque, legendary creatures", 
    "Retro 80s": "retro 80s style {prompt}, neon grid, synthwave, vaporwave, bold colors, pixelated, 80s nostalgia, low poly, highly detailed", 
    "Pencil Sketch": "pencil sketch of {prompt}, hand-drawn, grayscale, rough strokes, textured, shading, professional, artistic", 
    "Gothic": "gothic style {prompt}, dark, moody, intricate, baroque elements, dramatic lighting, haunting, eerie, highly detailed", 
    "Pop Art": "pop art of {prompt}, bold colors, comic-style, vibrant, playful, Warhol-inspired, thick outlines, high contrast, highly detailed", 
    "Impressionist": "impressionist painting of {prompt}, soft brush strokes, vibrant colors, abstract, Monet-inspired, dreamy, artistic, highly detailed", 
    "Sci-Fi": "sci-fi illustration of {prompt}, futuristic, sleek, alien technology, space age, highly detailed, high-tech, starry background", 
}

prompts = {
    "Animals": [ "Cat", "Dog", "Wolf", "Fox", "Owl", "Lion", "Elephant", "Tiger", "Butterfly", "Bird" ], 
    "Fantasy Creatures": [ "Dragon", "Unicorn", "Phoenix", "Griffin", "Mermaid", "Kraken", "Hydra" ], 
    "Inanimate Objects": [ "Vintage car", "Spacecraft", "Antique clock", "Sword", "Old book", "Lantern", "Crystal ball", "Robot", "Spaceship" ], 
    "Nature": [ "Oak tree", "Mountain range", "Ocean wave", "Waterfall", "Desert landscape", "Coral reef", "Iceberg" ], 
    "Mythical Elements": [ "Magic potion", "Golden chalice", "Enchanted forest", "Floating island", "Magic staff" ], 
    "Everyday Objects": [ "Bicycle", "Fountain pen", "Teacup", "Lantern", "Vinyl record", "Chessboard" ], 
    "Human and Character Types": [ "Knight", "Astronaut", "Samurai", "Pirate", "Dancer", "Detective", "Fairy" ], 
}


def generate_prompt_from_format():
    style_keys = list(styles.keys())
    prompt_keys = list(prompts.keys())

    random_style_key = style_keys[ random.randrange( 0, len(style_keys) ) ]
    random__prompt_key = prompt_keys[ random.randrange( 0, len(prompt_keys) ) ]

    random_style = styles[random_style_key]
    random_prompt_list = prompts[random__prompt_key]

    random_prompt = random_prompt_list[ random.randrange( 0, len(random_prompt_list) ) ]

    merged_prompt = random_style.format(prompt = random_prompt)

    return random_prompt
    print(merged_prompt)
    return merged_prompt

def generate_pos_neg_prompt():
    neg = "blurry, low resolution, pixelated, distorted, deformed, extra limbs, missing parts, unnatural anatomy, overexposed, underexposed, harsh lighting, cartoonish, 3D render, plastic, oversaturated, dull, watermark, text, logo, extra eyes, warped, unnatural textures, crowded background, out of focus, motion blur, grainy, noisy, low detail."
    pos = generate_prompt_from_format()
    print(pos)
    return pos, neg

if __name__ == '__main__':
    print(generate_prompt_from_format())